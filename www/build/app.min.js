"use strict";!function(o){o.module("application",["ngRoute"]).config(["$locationProvider","$routeProvider",function(o,n){o.html5Mode(!0),n.when("/explore",{templateUrl:"www/app/pages/gallery-index/gallery-index.html"}).otherwise({templateUrl:"www/app/pages/welcome/welcome.html",controller:"welcomeController",controllerAs:"ctrl"})}])}(window.angular),function(o){o.module("application").service("loginService",function(){function o(){this.loggedInUser={name:"Jon",photo:"angularicon.jpg",loginTime:Date.now()}}function n(){this.loggedInUser={}}function t(){if(this.loggedInUser!={})return!0}this.loggedInUser={},this.login=o,this.logout=n,this.isLoggedIn=t})}(window.angular),function(o){o.module("application").controller("exerciseOneController",["$routeParams","es",function(o,n){this.es=n}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["$routeParams","es",function(o,n){function t(){return e[Math.floor(Math.random()*e.length)]}this.es=n,this.title="Exercise 2";var e=[{name:"Brown",hex:"#A52A2A"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#DCDCDC"}];this.objectArray=[],this._createObject=function(){return{name:"Obj"+(this.objectArray.length+1),clickCount:0,color:t()}},this.controllerInitObject=this.objectArray,this.addNewObject=function(){this.objectArray.push(this._createObject())};this.buttonText="Button text",this.buttonMouseEnter=function(){this.buttonText="Rolled over"},this.buttonResetClick=function(){this.buttonText="Button text"}}])}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["loginService",function(o){this.loginService=o}])}(window.angular),function(o){o.module("application").controller("galleryIndexController",function(){})}(window.angular),function(o){o.module("application").controller("welcomeController",function(){})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
